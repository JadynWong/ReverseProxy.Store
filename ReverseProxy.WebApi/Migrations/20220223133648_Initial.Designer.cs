// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReverseProxy.Store.EFCore;

#nullable disable

namespace ReverseProxy.WebApi.Migrations
{
    [DbContext(typeof(EFCoreDbContext))]
    [Migration("20220223133648_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ReverseProxy.Store.Entities.RouteQueryParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProxyMatchId")
                        .HasColumnType("int");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProxyMatchId");

                    b.ToTable("RouteQueryParameter");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entities.SessionAffinityCookie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expiration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HttpOnly")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEssential")
                        .HasColumnType("bit");

                    b.Property<string>("MaxAge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SameSite")
                        .HasColumnType("int");

                    b.Property<int?>("SecurePolicy")
                        .HasColumnType("int");

                    b.Property<int>("SessionAffinityConfigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SessionAffinityConfigId")
                        .IsUnique();

                    b.ToTable("SessionAffinityCookie");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entities.WebProxyConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BypassOnLocal")
                        .HasColumnType("bit");

                    b.Property<int>("HttpClientConfigId")
                        .HasColumnType("int");

                    b.Property<bool?>("UseDefaultCredentials")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HttpClientConfigId")
                        .IsUnique();

                    b.ToTable("WebProxyConfig");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.ActiveHealthCheckOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("HealthCheckOptionsId")
                        .HasColumnType("int");

                    b.Property<string>("Interval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Policy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timeout")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckOptionsId")
                        .IsUnique();

                    b.ToTable("ActiveHealthCheckOptions");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.Cluster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoadBalancingPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClusterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Health")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.ForwarderRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActivityTimeout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AllowResponseBuffering")
                        .HasColumnType("bit");

                    b.Property<string>("ClusterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique()
                        .HasFilter("[ClusterId] IS NOT NULL");

                    b.ToTable("RequestProxyOptions");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.HealthCheckOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvailableDestinationsPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClusterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique()
                        .HasFilter("[ClusterId] IS NOT NULL");

                    b.ToTable("HealthCheckOptions");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.HttpClientConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClusterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("DangerousAcceptAnyServerCertificate")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnableMultipleHttp2Connections")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxConnectionsPerServer")
                        .HasColumnType("int");

                    b.Property<string>("RequestHeaderEncoding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SslProtocols")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique()
                        .HasFilter("[ClusterId] IS NOT NULL");

                    b.ToTable("ProxyHttpClientOptions");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.Metadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClusterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProxyRouteId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("ProxyRouteId");

                    b.ToTable("Metadatas");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.PassiveHealthCheckOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("HealthCheckOptionsId")
                        .HasColumnType("int");

                    b.Property<string>("Policy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReactivationPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckOptionsId")
                        .IsUnique();

                    b.ToTable("PassiveHealthCheckOptions");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.ProxyMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Hosts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Methods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProxyRouteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProxyRouteId")
                        .IsUnique();

                    b.ToTable("ProxyMatches");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.ProxyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorizationPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClusterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CorsPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("ProxyRoutes");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.RouteHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProxyMatchId")
                        .HasColumnType("int");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProxyMatchId");

                    b.ToTable("RouteHeaders");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.SessionAffinityConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AffinityKeyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClusterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FailurePolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Policy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique()
                        .HasFilter("[ClusterId] IS NOT NULL");

                    b.ToTable("SessionAffinityOptions");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.SessionAffinityOptionSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SessionAffinityOptionSettings");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.Transform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProxyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProxyRouteId");

                    b.ToTable("Transforms");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entities.RouteQueryParameter", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.ProxyMatch", "ProxyMatch")
                        .WithMany("QueryParameters")
                        .HasForeignKey("ProxyMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProxyMatch");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entities.SessionAffinityCookie", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.SessionAffinityConfig", "SessionAffinityConfig")
                        .WithOne("Cookie")
                        .HasForeignKey("ReverseProxy.Store.Entities.SessionAffinityCookie", "SessionAffinityConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionAffinityConfig");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entities.WebProxyConfig", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.HttpClientConfig", "HttpClientConfig")
                        .WithOne("WebProxy")
                        .HasForeignKey("ReverseProxy.Store.Entities.WebProxyConfig", "HttpClientConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HttpClientConfig");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.ActiveHealthCheckOptions", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.HealthCheckOptions", "HealthCheckOptions")
                        .WithOne("Active")
                        .HasForeignKey("ReverseProxy.Store.Entity.ActiveHealthCheckOptions", "HealthCheckOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheckOptions");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.Destination", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.Cluster", "Cluster")
                        .WithMany("Destinations")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.ForwarderRequest", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.Cluster", "Cluster")
                        .WithOne("HttpRequest")
                        .HasForeignKey("ReverseProxy.Store.Entity.ForwarderRequest", "ClusterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.HealthCheckOptions", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.Cluster", "Cluster")
                        .WithOne("HealthCheck")
                        .HasForeignKey("ReverseProxy.Store.Entity.HealthCheckOptions", "ClusterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.HttpClientConfig", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.Cluster", "Cluster")
                        .WithOne("HttpClient")
                        .HasForeignKey("ReverseProxy.Store.Entity.HttpClientConfig", "ClusterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.Metadata", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.Cluster", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReverseProxy.Store.Entity.Destination", null)
                        .WithMany("Metadata")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ReverseProxy.Store.Entity.ProxyRoute", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ProxyRouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.PassiveHealthCheckOptions", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.HealthCheckOptions", "HealthCheckOptions")
                        .WithOne("Passive")
                        .HasForeignKey("ReverseProxy.Store.Entity.PassiveHealthCheckOptions", "HealthCheckOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheckOptions");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.ProxyMatch", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.ProxyRoute", "ProxyRoute")
                        .WithOne("Match")
                        .HasForeignKey("ReverseProxy.Store.Entity.ProxyMatch", "ProxyRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProxyRoute");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.ProxyRoute", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.Cluster", "Cluster")
                        .WithMany("ProxyRoutes")
                        .HasForeignKey("ClusterId");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.RouteHeader", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.ProxyMatch", "ProxyMatch")
                        .WithMany("Headers")
                        .HasForeignKey("ProxyMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProxyMatch");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.SessionAffinityConfig", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.Cluster", "Cluster")
                        .WithOne("SessionAffinity")
                        .HasForeignKey("ReverseProxy.Store.Entity.SessionAffinityConfig", "ClusterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.Transform", b =>
                {
                    b.HasOne("ReverseProxy.Store.Entity.ProxyRoute", null)
                        .WithMany("Transforms")
                        .HasForeignKey("ProxyRouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.Cluster", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("HealthCheck");

                    b.Navigation("HttpClient");

                    b.Navigation("HttpRequest");

                    b.Navigation("Metadata");

                    b.Navigation("ProxyRoutes");

                    b.Navigation("SessionAffinity");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.Destination", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.HealthCheckOptions", b =>
                {
                    b.Navigation("Active");

                    b.Navigation("Passive");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.HttpClientConfig", b =>
                {
                    b.Navigation("WebProxy");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.ProxyMatch", b =>
                {
                    b.Navigation("Headers");

                    b.Navigation("QueryParameters");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.ProxyRoute", b =>
                {
                    b.Navigation("Match");

                    b.Navigation("Metadata");

                    b.Navigation("Transforms");
                });

            modelBuilder.Entity("ReverseProxy.Store.Entity.SessionAffinityConfig", b =>
                {
                    b.Navigation("Cookie");
                });
#pragma warning restore 612, 618
        }
    }
}
